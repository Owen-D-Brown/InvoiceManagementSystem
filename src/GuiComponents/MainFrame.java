/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GuiComponents;

import guiapplication.GuiApplication;
import static guiapplication.GuiApplication.frame;
import static guiapplication.GuiApplication.url;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.LinearGradientPaint;
import java.awt.MultipleGradientPaint.CycleMethod;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.ScrollPaneConstants;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author student
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
 
      
        jTable1.getSelectionModel().setSelectionInterval(1, 1);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                int w = jPanel1.getWidth();
                int h = jPanel1.getHeight();
                Color color1 = new Color(155,167,155);
                Color color2 = new Color(189,189,189);
                Color color3 = new Color(48, 43, 43);

                Point2D start = new Point2D.Float(0, 0);
                Point2D end = new Point2D.Float(0, 900);
                Point2D middle = new Point2D.Float(0, 500);
                float[] dist = {0f, 1f};
                Color[] colors = {color2, color3};
                // LinearGradientPaint gp =
                //new LinearGradientPaint(start, end, dist, colors, LinearGradientPaint.CycleMethod.NO_CYCLE);
                LinearGradientPaint gp =
                new LinearGradientPaint(start, end, dist, colors, LinearGradientPaint.CycleMethod.NO_CYCLE);

                g2d.setPaint(gp);
                g2d.fillRect(0, 0, w, h);
            }
        };
        invoicePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        InvoicePanelHeader = new javax.swing.JPanel();
        jButton1 = new CircleButton("", Color.orange);
        jButton2 = new CircleButton("", Color.red);
        jButton3 = new CircleButton("", Color.green);
        jButton4 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        viewInvoicePanel = new javax.swing.JPanel();
        clientName = new javax.swing.JLabel();
        streetAddress = new javax.swing.JLabel();
        areaAddress = new javax.swing.JLabel();
        eircode = new javax.swing.JLabel();
        invoiceNoLabel = new javax.swing.JLabel();
        invoiceNo = new javax.swing.JLabel();
        clientLabel = new javax.swing.JLabel();
        invoiceDateLabel = new javax.swing.JLabel();
        invoiceDate = new javax.swing.JLabel();
        invoicePONoLabel = new javax.swing.JLabel();
        poNumber = new javax.swing.JLabel();
        invoiceDueDateLabel = new javax.swing.JLabel();
        invoiceDueDate = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        contactNameLabel = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        invoiceNoLabel10 = new javax.swing.JLabel();
        invoiceNoLabel11 = new javax.swing.JLabel();
        invoiceNoLabel12 = new javax.swing.JLabel();
        invoiceNoLabel13 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        countyAddress = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        addInvoicePanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        invoiceNoLabel14 = new javax.swing.JLabel();
        invoiceNoLabel15 = new javax.swing.JLabel();
        invoiceNoLabel16 = new javax.swing.JLabel();
        invoiceNoLabel17 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        clientLabel2 = new javax.swing.JLabel();
        addContactCombo = new javax.swing.JComboBox<>();
        addClientCombo = new javax.swing.JComboBox<>();
        addAddressCombo = new javax.swing.JComboBox<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jButton11 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        invoiceDueDateLabel2 = new javax.swing.JLabel();
        invoicePONoLabel2 = new javax.swing.JLabel();
        invoiceDateLabel2 = new javax.swing.JLabel();
        invoiceNoLabel18 = new javax.swing.JLabel();
        addDate = new javax.swing.JTextField();
        addInvoiceNo = new javax.swing.JLabel();
        addDueDate = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        editInvoicePanel = new javax.swing.JPanel();
        invoiceNoLabel5 = new javax.swing.JLabel();
        clientLabel1 = new javax.swing.JLabel();
        invoiceDateLabel1 = new javax.swing.JLabel();
        editInvoiceNo = new javax.swing.JLabel();
        invoicePONoLabel1 = new javax.swing.JLabel();
        invoiceDueDateLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        invoiceNoLabel6 = new javax.swing.JLabel();
        invoiceNoLabel9 = new javax.swing.JLabel();
        invoiceNoLabel8 = new javax.swing.JLabel();
        invoiceNoLabel7 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        editDueDate = new javax.swing.JTextField();
        editDate = new javax.swing.JTextField();
        PONumberCombo = new javax.swing.JComboBox<>();
        contactCombo = new javax.swing.JComboBox<>();
        clientCombo = new javax.swing.JComboBox<>();
        clientAddressCombo = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 153, 51));
        setPreferredSize(new java.awt.Dimension(1920, 1080));
        setResizable(false);
        setSize(new java.awt.Dimension(1920, 1080));
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(1920, 1080));
        jPanel1.setLayout(null);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 204));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        try {
            jTable1.setModel(GuiApplication.populateTable("Invoices"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        jTable1.getSelectionModel().setSelectionInterval( 1, 1 );

        ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        cellSelectionModel.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {

                try {
                    //Setting information label information
                    clientName.setText(GuiApplication.getClient());
                    streetAddress.setText(GuiApplication.getClientAddy("StreetAddress"));
                    areaAddress.setText(GuiApplication.getClientAddy("AreaAddress"));
                    eircode.setText(GuiApplication.getClientAddy("ClientEircode"));
                    countyAddress.setText(GuiApplication.getClientAddy("ClientCounty"));
                    invoiceNo.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), 0));
                    invoiceDate.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), 1));
                    poNumber.setText(GuiApplication.getPONumber());
                    invoiceDueDate.setText((String) jTable1.getValueAt(jTable1.getSelectedRow(), 2));
                    contactNameLabel.setText(GuiApplication.getContact());

                    //Setting the table model
                    jTable2.setModel(searchTable("InvoiceDetails"));
                    System.out.println("scroll pane debug "+jTable2.getRowCount()*jTable2.getRowHeight());
                    jScrollPane2.setSize(new Dimension(587, ((6*jTable2.getRowHeight())+jTable2.getTableHeader().getHeight())));
                }catch (Exception e3)   {
                    e3.printStackTrace();
                }

                viewInvoicePanel.repaint();
                viewInvoicePanel.revalidate();

                try {
                    GuiApplication.getClient();
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }

        });
        jTable1.setPreferredSize(new java.awt.Dimension(710, 1000));
        jTable1.setTableHeader(new InvoicesTableHeader(jTable1.getColumnModel()));
        jScrollPane1.setViewportView(jTable1);

        InvoicePanelHeader.setBackground(new java.awt.Color(44, 217, 82));
        InvoicePanelHeader.setLayout(null);

        jButton1.setFocusable(false);
        jButton1.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        InvoicePanelHeader.add(jButton1);
        jButton1.setBounds(560, 2, 60, 60);
        jButton1.getAccessibleContext().setAccessibleDescription("");

        jButton2.setFocusable(false);
        jButton2.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        InvoicePanelHeader.add(jButton2);
        jButton2.setBounds(640, 2, 60, 60);

        jButton3.setFocusable(false);
        jButton3.setPreferredSize(new java.awt.Dimension(60, 60));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        InvoicePanelHeader.add(jButton3);
        jButton3.setBounds(480, 2, 60, 60);

        jButton4.setText("Return");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        InvoicePanelHeader.add(jButton4);
        jButton4.setBounds(10, 10, 120, 23);

        jPanel3.setBackground(new java.awt.Color(255, 0, 5));
        jPanel3.setLayout(null);

        jPanel5.setBackground(new java.awt.Color(255, 255, 153));
        jPanel5.setLayout(null);

        jLabel1.setText("Are You Sure You Want to Delete This Invoice?");
        jPanel5.add(jLabel1);
        jLabel1.setBounds(60, 70, 280, 16);

        jLabel2.setText("Warning");
        jPanel5.add(jLabel2);
        jLabel2.setBounds(160, 30, 80, 16);

        jButton9.setBackground(new java.awt.Color(102, 255, 0));
        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton9);
        jButton9.setBounds(240, 130, 90, 40);

        jButton10.setBackground(new java.awt.Color(255, 51, 51));
        jButton10.setText("Confirm");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton10);
        jButton10.setBounds(30, 130, 90, 40);

        jPanel3.add(jPanel5);
        jPanel5.setBounds(170, 180, 378, 224);

        javax.swing.GroupLayout invoicePanelLayout = new javax.swing.GroupLayout(invoicePanel);
        invoicePanel.setLayout(invoicePanelLayout);
        invoicePanelLayout.setHorizontalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invoicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE))
            .addComponent(InvoicePanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        invoicePanelLayout.setVerticalGroup(
            invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, invoicePanelLayout.createSequentialGroup()
                .addComponent(InvoicePanelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(invoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 862, Short.MAX_VALUE))
                    .addGroup(invoicePanelLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel3.setVisible(false);

        jPanel1.add(invoicePanel);
        invoicePanel.setBounds(920, 60, 765, 930);

        jPanel2.setLayout(new java.awt.CardLayout());

        viewInvoicePanel.setLayout(null);

        clientName.setText("clientName");
        viewInvoicePanel.add(clientName);
        clientName.setBounds(20, 220, 180, 20);

        streetAddress.setText("streetAddress");
        viewInvoicePanel.add(streetAddress);
        streetAddress.setBounds(20, 250, 320, 16);

        areaAddress.setText("areaAddress");
        viewInvoicePanel.add(areaAddress);
        areaAddress.setBounds(20, 270, 320, 16);

        eircode.setText("eircode");
        viewInvoicePanel.add(eircode);
        eircode.setBounds(20, 310, 60, 16);

        invoiceNoLabel.setText("Invoice Number:");
        viewInvoicePanel.add(invoiceNoLabel);
        invoiceNoLabel.setBounds(470, 180, 110, 16);

        invoiceNo.setText("Invoice No");
        viewInvoicePanel.add(invoiceNo);
        invoiceNo.setBounds(600, 180, 30, 20);

        clientLabel.setText("Bill To:");
        viewInvoicePanel.add(clientLabel);
        clientLabel.setBounds(20, 180, 110, 16);

        invoiceDateLabel.setText("Invoice Date:");
        viewInvoicePanel.add(invoiceDateLabel);
        invoiceDateLabel.setBounds(470, 200, 90, 16);

        invoiceDate.setText("Invoice No");
        viewInvoicePanel.add(invoiceDate);
        invoiceDate.setBounds(600, 200, 70, 16);

        invoicePONoLabel.setText("PO Number:");
        viewInvoicePanel.add(invoicePONoLabel);
        invoicePONoLabel.setBounds(470, 220, 90, 20);

        poNumber.setText("PO No");
        viewInvoicePanel.add(poNumber);
        poNumber.setBounds(600, 220, 60, 16);

        invoiceDueDateLabel.setText("Invoice Due Date:");
        viewInvoicePanel.add(invoiceDueDateLabel);
        invoiceDueDateLabel.setBounds(470, 240, 110, 20);

        invoiceDueDate.setText("PO No");
        viewInvoicePanel.add(invoiceDueDate);
        invoiceDueDate.setBounds(600, 240, 60, 16);

        jScrollPane2.setPreferredSize(new Dimension(587, ((jTable2.getRowCount()*jTable2.getRowHeight())+jTable2.getTableHeader().getHeight()))
        );

        try {
            jTable2.setModel(searchTable("InvoiceDetails"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        jScrollPane2.setViewportView(jTable2);

        viewInvoicePanel.add(jScrollPane2);
        jScrollPane2.setBounds(20, 370, 640, 90);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);

        contactNameLabel.setText("contactName");
        viewInvoicePanel.add(contactNameLabel);
        contactNameLabel.setBounds(20, 200, 180, 20);

        jLabel22.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel22.setText("PAYMENT DETAILS:");
        viewInvoicePanel.add(jLabel22);
        jLabel22.setBounds(30, 600, 130, 18);

        jLabel23.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel23.setText("We can accept payment via cash, cheque, debit card, credit cards and electronic bank transfers.");
        viewInvoicePanel.add(jLabel23);
        jLabel23.setBounds(30, 620, 530, 15);

        jLabel24.setText("Cool Beans Cafe");
        viewInvoicePanel.add(jLabel24);
        jLabel24.setBounds(30, 660, 100, 16);

        jLabel25.setText("BIC:");
        viewInvoicePanel.add(jLabel25);
        jLabel25.setBounds(30, 680, 40, 16);

        jLabel26.setText("IBAN:");
        viewInvoicePanel.add(jLabel26);
        jLabel26.setBounds(30, 710, 40, 16);

        jLabel27.setText("ICBSIE2A");
        viewInvoicePanel.add(jLabel27);
        jLabel27.setBounds(90, 680, 100, 16);

        jLabel28.setText("IC34ICBS3884920348504932");
        viewInvoicePanel.add(jLabel28);
        jLabel28.setBounds(90, 710, 160, 16);

        jPanel7.setBackground(new java.awt.Color(44, 217, 82));
        jPanel7.setLayout(null);

        invoiceNoLabel10.setText("CoolBeansCafe@gmail.com");
        jPanel7.add(invoiceNoLabel10);
        invoiceNoLabel10.setBounds(430, 100, 170, 16);

        invoiceNoLabel11.setText("083 478 5674");
        jPanel7.add(invoiceNoLabel11);
        invoiceNoLabel11.setBounds(430, 80, 110, 16);

        invoiceNoLabel12.setText("Hailey Draw");
        jPanel7.add(invoiceNoLabel12);
        invoiceNoLabel12.setBounds(430, 60, 110, 16);

        invoiceNoLabel13.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        invoiceNoLabel13.setText("COOL BEANS CAFE");
        jPanel7.add(invoiceNoLabel13);
        invoiceNoLabel13.setBounds(430, 10, 240, 20);

        jLabel39.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/logo.png"))); // NOI18N
        jPanel7.add(jLabel39);
        jLabel39.setBounds(10, 5, 160, 160);

        viewInvoicePanel.add(jPanel7);
        jPanel7.setBounds(0, 0, 680, 170);

        countyAddress.setText("countyAddress");
        viewInvoicePanel.add(countyAddress);
        countyAddress.setBounds(20, 290, 320, 16);

        jLabel40.setText("Notes:");
        viewInvoicePanel.add(jLabel40);
        jLabel40.setBounds(30, 510, 50, 16);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane5.setViewportView(jTextArea2);

        viewInvoicePanel.add(jScrollPane5);
        jScrollPane5.setBounds(30, 530, 620, 60);

        jLabel41.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel41.setText("TERMS AND CONDITIONS:");
        viewInvoicePanel.add(jLabel41);
        jLabel41.setBounds(30, 740, 160, 18);

        jLabel42.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(102, 102, 102));
        jLabel42.setText("All payments must be made within 14 days of receiving the invoice.");
        viewInvoicePanel.add(jLabel42);
        jLabel42.setBounds(30, 760, 530, 15);

        jLabel43.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(102, 102, 102));
        jLabel43.setText("All payments must be made in advance unless payment time has been previously agreed upon.");
        viewInvoicePanel.add(jLabel43);
        jLabel43.setBounds(30, 783, 530, 20);

        jLabel44.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(102, 102, 102));
        jLabel44.setText("All orders must be placed a week in advance of the event date.");
        viewInvoicePanel.add(jLabel44);
        jLabel44.setBounds(30, 770, 530, 20);

        jLabel45.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(102, 102, 102));
        jLabel45.setText("Please ensure we are aware and given prior notice of any allergies or dietary requirements your guests may have.");
        viewInvoicePanel.add(jLabel45);
        jLabel45.setBounds(30, 797, 630, 20);

        jLabel46.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(102, 102, 102));
        jLabel46.setText("Failure to meet these terms may result in the suspension of future services.");
        viewInvoicePanel.add(jLabel46);
        jLabel46.setBounds(30, 810, 630, 20);

        jLabel47.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(102, 102, 102));
        jLabel47.setText("We offer set menus but are happy to adapt to suit you given proper notice.");
        viewInvoicePanel.add(jLabel47);
        jLabel47.setBounds(30, 827, 530, 15);

        jLabel48.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel48.setText("CANCELLATION POLICY");
        viewInvoicePanel.add(jLabel48);
        jLabel48.setBounds(30, 850, 160, 18);

        jLabel49.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(102, 102, 102));
        jLabel49.setText("We require at least 7 days notice to cancel an order or you may lose your deposit.");
        viewInvoicePanel.add(jLabel49);
        jLabel49.setBounds(30, 870, 630, 20);

        jLabel50.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(102, 102, 102));
        jLabel50.setText("Please contact Hailey at 083 478 5674 should you have any queries.");
        viewInvoicePanel.add(jLabel50);
        jLabel50.setBounds(30, 890, 630, 20);

        jPanel2.add(viewInvoicePanel, "viewInvoice");

        addInvoicePanel.setLayout(null);

        jPanel8.setBackground(new java.awt.Color(44, 217, 82));
        jPanel8.setLayout(null);

        invoiceNoLabel14.setText("CoolBeansCafe@gmail.com");
        jPanel8.add(invoiceNoLabel14);
        invoiceNoLabel14.setBounds(430, 100, 170, 16);

        invoiceNoLabel15.setText("083 478 5674");
        jPanel8.add(invoiceNoLabel15);
        invoiceNoLabel15.setBounds(430, 80, 110, 16);

        invoiceNoLabel16.setText("Hailey Draw");
        jPanel8.add(invoiceNoLabel16);
        invoiceNoLabel16.setBounds(430, 60, 110, 16);

        invoiceNoLabel17.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        invoiceNoLabel17.setText("COOL BEANS CAFE");
        jPanel8.add(invoiceNoLabel17);
        invoiceNoLabel17.setBounds(430, 10, 240, 20);

        jLabel51.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/logo.png"))); // NOI18N
        jPanel8.add(jLabel51);
        jLabel51.setBounds(10, 5, 160, 160);

        addInvoicePanel.add(jPanel8);
        jPanel8.setBounds(0, 0, 680, 170);

        clientLabel2.setText("Bill To:");
        addInvoicePanel.add(clientLabel2);
        clientLabel2.setBounds(20, 180, 110, 16);

        addContactCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        addContactCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContactComboActionPerformed(evt);
            }
        });
        try {
            addContactCombo.setModel(new DefaultComboBoxModel(GuiApplication.getAddContacts()));
        }catch (SQLException e) {
            e.printStackTrace();
        }
        addInvoicePanel.add(addContactCombo);
        addContactCombo.setBounds(20, 200, 130, 22);

        addClientCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        addClientCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClientComboActionPerformed(evt);
            }
        });
        addInvoicePanel.add(addClientCombo);
        addClientCombo.setBounds(20, 230, 130, 22);
        try {
            addClientCombo.setModel(new DefaultComboBoxModel(GuiApplication.getClients()));
        } catch (SQLException e) {
            e.printStackTrace();
        }

        addAddressCombo.setModel(new  DefaultComboBoxModel(new String[0]));
        addAddressCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAddressComboActionPerformed(evt);
            }
        });
        try {
            addAddressCombo.setModel(new  DefaultComboBoxModel(getAddresses((String)addClientCombo.getSelectedItem())));
            addAddressCombo.setRenderer(new AddressRenderer());
            addAddressCombo.setSelectedIndex(0);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        addInvoicePanel.add(addAddressCombo);
        addAddressCombo.setBounds(20, 260, 170, 80);

        jScrollPane6.setPreferredSize(new Dimension(587, ((jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight()))
        );
        jScrollPane6.setRequestFocusEnabled(false);

        try {
            jTable5.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null}
                },
                new String [] {
                    "Description", "Quantity", "Total Price"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            });
            jTable5.setToolTipText("");
        } catch (Exception e) {
            e.printStackTrace();
        }
        TableColumn itemColumn2 = jTable5.getColumnModel().getColumn(0);
        try {
            itemColumn2.setCellEditor(new DefaultCellEditor(populateItemDetail()));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        jScrollPane6.setViewportView(jTable5);

        addInvoicePanel.add(jScrollPane6);
        jScrollPane6.setBounds(20, 370, 640, 90);
        jScrollPane6.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);

        jButton11.setText("Add Row");
        jButton11.setToolTipText("Please fill in all fields before adding a new row");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        addInvoicePanel.add(jButton11);
        jButton11.setBounds(550, 470, 110, 23);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane7.setViewportView(jTextArea3);

        addInvoicePanel.add(jScrollPane7);
        jScrollPane7.setBounds(30, 530, 620, 60);

        jLabel29.setText("Notes:");
        addInvoicePanel.add(jLabel29);
        jLabel29.setBounds(30, 510, 50, 16);

        jLabel30.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel30.setText("PAYMENT DETAILS:");
        addInvoicePanel.add(jLabel30);
        jLabel30.setBounds(30, 600, 130, 18);

        jLabel31.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel31.setText("We can accept payment via cash, cheque, debit card, credit cards and electronic bank transfers.");
        addInvoicePanel.add(jLabel31);
        jLabel31.setBounds(30, 620, 530, 15);

        jLabel32.setText("Cool Beans Cafe");
        addInvoicePanel.add(jLabel32);
        jLabel32.setBounds(30, 660, 100, 16);

        jLabel33.setText("BIC:");
        addInvoicePanel.add(jLabel33);
        jLabel33.setBounds(30, 680, 40, 16);

        jLabel34.setText("IBAN:");
        addInvoicePanel.add(jLabel34);
        jLabel34.setBounds(30, 710, 40, 16);

        jLabel35.setText("IC34ICBS3884920348504932");
        addInvoicePanel.add(jLabel35);
        jLabel35.setBounds(90, 710, 160, 16);

        jLabel36.setText("ICBSIE2A");
        addInvoicePanel.add(jLabel36);
        jLabel36.setBounds(90, 680, 100, 16);

        jLabel37.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel37.setText("TERMS AND CONDITIONS:");
        addInvoicePanel.add(jLabel37);
        jLabel37.setBounds(30, 740, 160, 18);

        jLabel38.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(102, 102, 102));
        jLabel38.setText("All payments must be made within 14 days of receiving the invoice.");
        addInvoicePanel.add(jLabel38);
        jLabel38.setBounds(30, 760, 530, 15);

        jLabel52.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(102, 102, 102));
        jLabel52.setText("All orders must be placed a week in advance of the event date.");
        addInvoicePanel.add(jLabel52);
        jLabel52.setBounds(30, 770, 530, 20);

        jLabel53.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(102, 102, 102));
        jLabel53.setText("All payments must be made in advance unless payment time has been previously agreed upon.");
        addInvoicePanel.add(jLabel53);
        jLabel53.setBounds(30, 783, 530, 20);

        jLabel54.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(102, 102, 102));
        jLabel54.setText("Please ensure we are aware and given prior notice of any allergies or dietary requirements your guests may have.");
        addInvoicePanel.add(jLabel54);
        jLabel54.setBounds(30, 797, 630, 20);

        jLabel55.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(102, 102, 102));
        jLabel55.setText("Failure to meet these terms may result in the suspension of future services.");
        addInvoicePanel.add(jLabel55);
        jLabel55.setBounds(30, 810, 630, 20);

        jLabel56.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(102, 102, 102));
        jLabel56.setText("We offer set menus but are happy to adapt to suit you given proper notice.");
        addInvoicePanel.add(jLabel56);
        jLabel56.setBounds(30, 827, 530, 15);

        jLabel57.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel57.setText("CANCELLATION POLICY");
        addInvoicePanel.add(jLabel57);
        jLabel57.setBounds(30, 850, 160, 18);

        jLabel58.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(102, 102, 102));
        jLabel58.setText("We require at least 7 days notice to cancel an order or you may lose your deposit.");
        addInvoicePanel.add(jLabel58);
        jLabel58.setBounds(30, 870, 630, 20);

        jLabel59.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(102, 102, 102));
        jLabel59.setText("Please contact Hailey at 083 478 5674 should you have any queries.");
        addInvoicePanel.add(jLabel59);
        jLabel59.setBounds(30, 890, 490, 20);

        invoiceDueDateLabel2.setText("Invoice Due Date:");
        addInvoicePanel.add(invoiceDueDateLabel2);
        invoiceDueDateLabel2.setBounds(480, 240, 110, 20);

        invoicePONoLabel2.setText("PO Number:");
        addInvoicePanel.add(invoicePONoLabel2);
        invoicePONoLabel2.setBounds(480, 220, 90, 20);

        invoiceDateLabel2.setText("Invoice Date:");
        addInvoicePanel.add(invoiceDateLabel2);
        invoiceDateLabel2.setBounds(480, 200, 90, 16);

        invoiceNoLabel18.setText("Invoice Number:");
        addInvoicePanel.add(invoiceNoLabel18);
        invoiceNoLabel18.setBounds(480, 180, 110, 16);

        addDate.setText(null);
        addDate.setToolTipText("Please enter \"dd/mm/yyyy\" format");
        addDate.setDocument(new JTextFieldLimit(10));
        addInvoicePanel.add(addDate);
        addDate.setBounds(590, 200, 85, 20);

        addInvoiceNo.setText(Integer.toString(Integer.parseInt(jTable1.getValueAt(jTable1.getRowCount() - 1, 0).toString()) + 1));
        addInvoicePanel.add(addInvoiceNo);
        addInvoiceNo.setBounds(590, 180, 80, 16);

        addDueDate.setText(null);
        addDueDate.setToolTipText("Please enter \"dd/mm/yyyy\" format");
        addDueDate.setDocument(new JTextFieldLimit(10));
        addInvoicePanel.add(addDueDate);
        addDueDate.setBounds(590, 240, 85, 20);

        jButton12.setText("Save Invoice");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        addInvoicePanel.add(jButton12);
        jButton12.setBounds(540, 890, 130, 23);

        jPanel2.add(addInvoicePanel, "addInvoice");

        editInvoicePanel.setLayout(null);

        invoiceNoLabel5.setText("Invoice Number:");
        editInvoicePanel.add(invoiceNoLabel5);
        invoiceNoLabel5.setBounds(480, 180, 110, 16);

        clientLabel1.setText("Bill To:");
        editInvoicePanel.add(clientLabel1);
        clientLabel1.setBounds(20, 180, 110, 16);

        invoiceDateLabel1.setText("Invoice Date:");
        editInvoicePanel.add(invoiceDateLabel1);
        invoiceDateLabel1.setBounds(480, 200, 90, 16);

        editInvoiceNo.setText(invoiceNo.getText());
        editInvoicePanel.add(editInvoiceNo);
        editInvoiceNo.setBounds(590, 180, 80, 16);

        invoicePONoLabel1.setText("PO Number:");
        editInvoicePanel.add(invoicePONoLabel1);
        invoicePONoLabel1.setBounds(480, 220, 90, 20);

        invoiceDueDateLabel1.setText("Invoice Due Date:");
        editInvoicePanel.add(invoiceDueDateLabel1);
        invoiceDueDateLabel1.setBounds(480, 240, 110, 20);

        jScrollPane3.setPreferredSize(new Dimension(587, ((jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight()))
        );
        jScrollPane3.setRequestFocusEnabled(false);

        try {
            jTable3.setModel(searchTable("InvoiceDetails"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        jScrollPane3.setViewportView(jTable3);
        if(jTable3.getRowCount() > 0) {
            TableColumn itemColumn = jTable3.getColumnModel().getColumn(0);
        }

        editInvoicePanel.add(jScrollPane3);
        jScrollPane3.setBounds(20, 370, 640, 90);
        jScrollPane3.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);

        jPanel6.setBackground(new java.awt.Color(44, 217, 82));
        jPanel6.setLayout(null);

        invoiceNoLabel6.setText("CoolBeansCafe@gmail.com");
        jPanel6.add(invoiceNoLabel6);
        invoiceNoLabel6.setBounds(430, 100, 170, 16);

        invoiceNoLabel9.setText("083 478 5674");
        jPanel6.add(invoiceNoLabel9);
        invoiceNoLabel9.setBounds(430, 80, 110, 16);

        invoiceNoLabel8.setText("Hailey Draw");
        jPanel6.add(invoiceNoLabel8);
        invoiceNoLabel8.setBounds(430, 60, 110, 16);

        invoiceNoLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        invoiceNoLabel7.setText("COOL BEANS CAFE");
        jPanel6.add(invoiceNoLabel7);
        invoiceNoLabel7.setBounds(430, 10, 240, 20);

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Assets/logo.png"))); // NOI18N
        jPanel6.add(jLabel21);
        jLabel21.setBounds(10, 5, 160, 160);

        editInvoicePanel.add(jPanel6);
        jPanel6.setBounds(0, 0, 680, 170);

        editDueDate.setText(invoiceDueDate.getText());
        editDueDate.setToolTipText("Please enter a date in the format \"dd/mm/yyyy\"");
        editDueDate.setDocument(new JTextFieldLimit(10));
        editInvoicePanel.add(editDueDate);
        editDueDate.setBounds(590, 240, 85, 20);

        editDate.setText(invoiceDate.getText());
        editDate.setToolTipText("Please enter a date in the format \"dd/mm/yyyy\"");
        editDate.setDocument(new JTextFieldLimit(10));
        editInvoicePanel.add(editDate);
        editDate.setBounds(590, 200, 85, 20);

        PONumberCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        editInvoicePanel.add(PONumberCombo);
        PONumberCombo.setBounds(590, 220, 85, 22);

        contactCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        contactCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactComboActionPerformed(evt);
            }
        });
        editInvoicePanel.add(contactCombo);
        contactCombo.setBounds(20, 200, 130, 22);

        clientCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        clientCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientComboActionPerformed(evt);
            }
        });
        editInvoicePanel.add(clientCombo);
        clientCombo.setBounds(20, 230, 130, 22);

        clientAddressCombo.setModel(new  DefaultComboBoxModel(new String[0]));
        clientAddressCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientAddressComboActionPerformed(evt);
            }
        });
        editInvoicePanel.add(clientAddressCombo);
        clientAddressCombo.setBounds(20, 260, 170, 80);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        editInvoicePanel.add(jScrollPane4);
        jScrollPane4.setBounds(30, 530, 620, 60);

        jLabel3.setText("Notes:");
        editInvoicePanel.add(jLabel3);
        jLabel3.setBounds(30, 510, 50, 16);

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel4.setText("CANCELLATION POLICY");
        editInvoicePanel.add(jLabel4);
        jLabel4.setBounds(30, 850, 160, 18);

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Please contact Hailey at 083 478 5674 should you have any queries.");
        editInvoicePanel.add(jLabel5);
        jLabel5.setBounds(30, 890, 630, 20);

        jLabel6.setText("IBAN:");
        editInvoicePanel.add(jLabel6);
        jLabel6.setBounds(30, 710, 40, 16);

        jLabel7.setText("IC34ICBS3884920348504932");
        editInvoicePanel.add(jLabel7);
        jLabel7.setBounds(90, 710, 160, 16);

        jLabel8.setText("BIC:");
        editInvoicePanel.add(jLabel8);
        jLabel8.setBounds(30, 680, 40, 16);

        jLabel10.setText("ICBSIE2A");
        editInvoicePanel.add(jLabel10);
        jLabel10.setBounds(90, 680, 100, 16);

        jLabel11.setText("Cool Beans Cafe");
        editInvoicePanel.add(jLabel11);
        jLabel11.setBounds(30, 660, 100, 16);

        jLabel12.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel12.setText("PAYMENT DETAILS:");
        editInvoicePanel.add(jLabel12);
        jLabel12.setBounds(30, 600, 130, 18);

        jLabel9.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel9.setText("We can accept payment via cash, cheque, debit card, credit cards and electronic bank transfers.");
        editInvoicePanel.add(jLabel9);
        jLabel9.setBounds(30, 620, 530, 15);

        jLabel13.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("All payments must be made within 14 days of receiving the invoice.");
        editInvoicePanel.add(jLabel13);
        jLabel13.setBounds(30, 760, 530, 15);

        jLabel14.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("All orders must be placed a week in advance of the event date.");
        editInvoicePanel.add(jLabel14);
        jLabel14.setBounds(30, 770, 530, 20);

        jLabel15.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("All payments must be made in advance unless payment time has been previously agreed upon.");
        editInvoicePanel.add(jLabel15);
        jLabel15.setBounds(30, 783, 530, 20);

        jLabel16.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(102, 102, 102));
        jLabel16.setText("We offer set menus but are happy to adapt to suit you given proper notice.");
        editInvoicePanel.add(jLabel16);
        jLabel16.setBounds(30, 827, 530, 15);

        jLabel17.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Please ensure we are aware and given prior notice of any allergies or dietary requirements your guests may have.");
        editInvoicePanel.add(jLabel17);
        jLabel17.setBounds(30, 797, 630, 20);

        jLabel18.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel18.setText("TERMS AND CONDITIONS:");
        editInvoicePanel.add(jLabel18);
        jLabel18.setBounds(30, 740, 160, 18);

        jLabel19.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("Failure to meet these terms may result in the suspension of future services.");
        editInvoicePanel.add(jLabel19);
        jLabel19.setBounds(30, 810, 630, 20);

        jLabel20.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(102, 102, 102));
        jLabel20.setText("We require at least 7 days notice to cancel an order or you may lose your deposit.");
        editInvoicePanel.add(jLabel20);
        jLabel20.setBounds(30, 870, 630, 20);

        jButton8.setText("Update Invoice");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        editInvoicePanel.add(jButton8);
        jButton8.setBounds(550, 710, 120, 23);

        jButton6.setText("Delete Row");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        editInvoicePanel.add(jButton6);
        jButton6.setBounds(550, 680, 120, 23);

        jButton5.setText("Add Row");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        editInvoicePanel.add(jButton5);
        jButton5.setBounds(550, 650, 120, 23);

        jButton7.setText("Reset Changes");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        editInvoicePanel.add(jButton7);
        jButton7.setBounds(550, 330, 120, 23);

        jPanel2.add(editInvoicePanel, "editInvoice");

        jPanel1.add(jPanel2);
        jPanel2.setBounds(50, 59, 680, 930);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1920, 1080);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    Map<String, String>invoiceDetailsMap = new HashMap<>();
    
    public void populateDetailsHashMap() throws SQLException {
        invoiceDetailsMap.clear();
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT id.ItemID, m.ItemName FROM InvoiceDetails id INNER JOIN Menu m ON id.ItemID = m.ItemID WHERE id.InvoiceNumber = "+(String)invoiceNo.getText());
         try {
            // Iterate through the ResultSet
            while (rs.next()) {
                // Extract the data from the current row
                String key = rs.getString(1); // Replace "column1" with the actual column name
                String value = rs.getString(2); // Replace "column2" with the actual column name

                // Populate the HashMap
                invoiceDetailsMap.put(key, value);
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle the exception appropriately
        }
        for (Map.Entry<String, String> entry : invoiceDetailsMap.entrySet()) {
            //System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
        }
        
        conn.close();
         stmt.close();
         rs.close();
    }
        
    Map<String, String> itemsToAdd = new HashMap<>();
    public void detailAddControl() throws SQLException {
        
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        //Setting box information
        editInvoiceNo.setText(invoiceNo.getText());
        editDueDate.setText(invoiceDueDate.getText());
        editDate.setText(invoiceDate.getText());
        
        editInvoicePanel.revalidate();
        editInvoicePanel.repaint();
        try {
            
            
            clientCombo.setModel(new DefaultComboBoxModel(GuiApplication.getClients()));
            clientCombo.setSelectedItem((clientName.getText()));
            jTable3.setModel(searchTable("InvoiceDetails"));
            jScrollPane3.setSize(new Dimension(587, ((jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight())));
            contactCombo.setModel(new DefaultComboBoxModel(GuiApplication.getContacts()));
            contactCombo.setSelectedItem(contactNameLabel.getText());
            PONumberCombo.setModel(new DefaultComboBoxModel(GuiApplication.getPONumbers()));
            if(PONumberCombo.getItemCount() > 0)
                PONumberCombo.setSelectedIndex(0);
           
            
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TableColumn itemColumn = jTable3.getColumnModel().getColumn(0);
        try {
            itemColumn.setCellEditor(new DefaultCellEditor(populateItemDetail()));
            setItemDetails();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        CardLayout layout = (CardLayout) jPanel2.getLayout();
        layout.show(jPanel2, "editInvoice");
      currentRowCount = jTable3.getRowCount();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clientAddressComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientAddressComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientAddressComboActionPerformed


    private void clientComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientComboActionPerformed
        try {
            contactCombo.setModel(new DefaultComboBoxModel(GuiApplication.getContacts()));
            contactCombo.setSelectedItem(0);
            PONumberCombo.setModel(new DefaultComboBoxModel(GuiApplication.getPONumbers()));
            if(PONumberCombo.getItemCount() != 0)
                PONumberCombo.setSelectedIndex(0);
            clientAddressCombo.setModel(new  DefaultComboBoxModel(getAddresses((String)clientCombo.getSelectedItem())));
            clientAddressCombo.setRenderer(new AddressRenderer());
            clientAddressCombo.setSelectedIndex(0);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clientComboActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        CardLayout layout = (CardLayout) jPanel2.getLayout();
        layout.show(jPanel2, "viewInvoice");
        try {
            jTable3.setModel(searchTable("InvoiceDetails"));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        jScrollPane3.setSize(new Dimension(587, ((jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight())));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void contactComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactComboActionPerformed
        try {
            PONumberCombo.setModel(new DefaultComboBoxModel(GuiApplication.getPONumbers()));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(PONumberCombo.getItemCount() > 0)
            PONumberCombo.setSelectedIndex(0);
    }//GEN-LAST:event_contactComboActionPerformed
    int currentRowCount;
    ArrayList<String[]> items = new ArrayList<>();
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        int lastRow = model.getRowCount() - 1;
        Object cellValue1 = jTable3.getValueAt(lastRow, 0);
        Object cellValue2 = jTable3.getValueAt(lastRow, 1);
        Object cellValue3 = jTable3.getValueAt(lastRow, 2);
        if (cellValue1 != null && !cellValue1.toString().isEmpty()  )  {
            if(cellValue2 != null &&!cellValue2.toString().isEmpty()) {
                if(cellValue3 != null && !cellValue3.toString().isEmpty()) {
                                        if(model.getRowCount() > currentRowCount) {
                        String[] re = new String[3];
                        re[0] = jTable3.getValueAt(lastRow, 0).toString();
                        re[1] = jTable3.getValueAt(lastRow, 1).toString();
                        re[2] = jTable3.getValueAt(lastRow, 2).toString();
                        items.add(re);
                                           
                    }
                    //System.out.println(model.getValueAt(lastRow, 0));
                    model.addRow(new Object[]{"", "", ""});
                    jScrollPane3.setSize(new Dimension(587, ((jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight())));
                    jTable3.setModel(model);
                    //System.out.println("firing button "+(jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight());

                    editInvoicePanel.repaint();
                    editInvoicePanel.revalidate();


                }
            }

        } else {
                         JOptionPane.showMessageDialog(this, "Please ensure you have filled in the previous record before trying to add another.", "Error", JOptionPane.INFORMATION_MESSAGE);

        }
      
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(jTable3.getRowCount() <= currentRowCount) {
            
        } else if(jTable3.getRowCount() > currentRowCount ) {
            
        }
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        model.removeRow(jTable3.getRowCount()-1);
        jTable3.setModel(model);
        jScrollPane3.setSize(new Dimension(587, ((jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight())));
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
 editInvoiceNo.setText(invoiceNo.getText());
        editDueDate.setText(invoiceDueDate.getText());
        editDate.setText(invoiceDate.getText());
        
   
        try {
            
            clientCombo.setModel(new DefaultComboBoxModel(GuiApplication.getClients()));
            clientCombo.setSelectedItem((clientName.getText()));
            jTable3.setModel(searchTable("InvoiceDetails"));
            contactCombo.setModel(new DefaultComboBoxModel(GuiApplication.getContacts()));
            contactCombo.setSelectedItem(contactNameLabel.getText());
            PONumberCombo.setModel(new DefaultComboBoxModel(GuiApplication.getPONumbers()));
            PONumberCombo.setSelectedIndex(0);
           
            
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TableColumn itemColumn = jTable3.getColumnModel().getColumn(0);
        try {
            itemColumn.setCellEditor(new DefaultCellEditor(populateItemDetail()));
            setItemDetails();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        jScrollPane3.setSize(new Dimension(587, ((jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight())));
            editInvoicePanel.revalidate();
        editInvoicePanel.repaint();
  
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        try {
            updateInvoiceDetails(editInvoiceNo.getText());
            updateInvoice(editInvoiceNo.getText());
            
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            jTable1.setModel(GuiApplication.populateTable("Invoices"));
            jTable1.getSelectionModel().setSelectionInterval( 1, 1 );
        } catch (Exception e) {
            e.printStackTrace();
        }
        CardLayout layout = (CardLayout) jPanel2.getLayout();
        layout.show(jPanel2, "viewInvoice");
        //jTable1.getSelectionModel().setSelectionInterval( 1, 1 );
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        CardLayout layout = (CardLayout) jPanel2.getLayout();
        layout.show(jPanel2, "viewInvoice");
        jPanel3.setVisible(true);
        jTable1.setEnabled(false);
        jTable1.setVisible(false);
        jScrollPane1.setVisible(false);
        jTable2.setEnabled(false);
        jTable3.setEnabled(false);
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        jButton8.setEnabled(false);
        jTextArea2.setEnabled(false);
        jScrollPane1.setEnabled(false);
        jScrollPane2.setEnabled(false);
        jScrollPane3.setEnabled(false);
   

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            deleteInvoice(invoiceNo.getText());
            jPanel3.setVisible(false);
            jTable1.setEnabled(true);
            jTable1.setVisible(true);
            jScrollPane1.setVisible(true);
            jTable2.setEnabled(true);
            jTable3.setEnabled(true);
            jButton1.setEnabled(true);
            jButton2.setEnabled(true);
            jButton3.setEnabled(true);
            jButton4.setEnabled(true);
            jButton5.setEnabled(true);
            jButton6.setEnabled(true);
            jButton7.setEnabled(true);
            jButton8.setEnabled(true);
            jTextArea2.setEnabled(true);
            jScrollPane1.setEnabled(true);
            jScrollPane2.setEnabled(true);
            jScrollPane3.setEnabled(true);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jPanel3.setVisible(false);
        jTable1.setEnabled(true);
        jTable1.setVisible(true);
        jScrollPane1.setVisible(true);
        jTable2.setEnabled(true);
        jTable3.setEnabled(true);
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        jButton5.setEnabled(true);
        jButton6.setEnabled(true);
        jButton7.setEnabled(true);
        jButton8.setEnabled(true);
        jTextArea2.setEnabled(true);
        jScrollPane1.setEnabled(true);
        jScrollPane2.setEnabled(true);
        jScrollPane3.setEnabled(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        CardLayout layout = (CardLayout) jPanel2.getLayout();
        layout.show(jPanel2, "addInvoice");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void addContactComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContactComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addContactComboActionPerformed

    private void addClientComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClientComboActionPerformed
     
        try {
            addContactCombo.setModel(new DefaultComboBoxModel(getAddContacts()));
            addAddressCombo.setModel(new  DefaultComboBoxModel(getAddresses((String)addClientCombo.getSelectedItem())));
            addAddressCombo.setRenderer(new AddressRenderer());
            addAddressCombo.setSelectedIndex(0);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
 
    }//GEN-LAST:event_addClientComboActionPerformed

    private void addAddressComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAddressComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAddressComboActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
        int lastRow = model.getRowCount() - 1;
        Object cellValue1 = jTable5.getValueAt(lastRow, 0);
        Object cellValue2 = jTable5.getValueAt(lastRow, 1);
        Object cellValue3 = jTable5.getValueAt(lastRow, 2);
        if (cellValue1 != null && !cellValue1.toString().isEmpty()  )  {
            if(cellValue2 != null &&!cellValue2.toString().isEmpty()) {
                if(cellValue3 != null && !cellValue3.toString().isEmpty()) {
                    model.addRow(new Object[]{"", "", 0});
                    
                    jTable5.setModel(model);
                    //System.out.println("firing button "+(jTable3.getRowCount()*jTable3.getRowHeight())+jTable3.getTableHeader().getHeight());



                }
            }

        } else {
             JOptionPane.showMessageDialog(this, "Please ensure you have filled in the previous record before trying to add another.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        if(jTable5.getRowCount() >= 5) {
            jScrollPane6.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        } else {
            jScrollPane6.setSize(new Dimension(587, ((jTable5.getRowCount()*jTable5.getRowHeight())+jTable5.getTableHeader().getHeight())));
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        try {
            populateAddressMap();
            populateClientMap();
            populateContactMap();
            
            //Establish the connection
            DriverManager.registerDriver(new org.sqlite.JDBC());
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            //
            
            String addressID = addressMap.get((String) addAddressCombo.getSelectedItem());
            String clientID = clientMap.get((String) addClientCombo.getSelectedItem());
            String contactID = contactMap.get((String) addContactCombo.getSelectedItem());
            String invoiceDate = addDate.getText();
            
            String invoiceBookingDate = invoiceDate;
            String invoiceDueDate = addDueDate.getText();
            String invoiceNotes = jTextArea3.getText();
            String invoiceNo = (String) addInvoiceNo.getText();
            //Getting totals
            double invoiceTotal = 0;
            double invoiceSubtotal = 0;
            
            
            for(int i = 0; i<jTable5.getRowCount(); i++) {
                invoiceTotal += Double.parseDouble((String) jTable5.getValueAt(i, 2));
                invoiceSubtotal += Double.parseDouble((String) jTable5.getValueAt(i, 2));
            }
            //Add invoice
            String insertSQL = "INSERT INTO Invoices (InvoiceDate, InvoiceDueDate, InvoiceBookingDate, InvoiceSubtotal, InvoiceTotal, InvoicePaid, InvoiceNotes, ClientID, ContactID) " +
                       "VALUES ('" + invoiceDate + "', '" + invoiceDueDate + "', '" + invoiceBookingDate + "', " + invoiceSubtotal + ", " + invoiceTotal + ", 'No', '" + invoiceNotes + "', " + clientID + ", " + contactID + ")";
            stmt.executeUpdate(insertSQL);

            //Add invoice Details
            //Get Item ID
            
            populateInvoiceDetailHashMap();
            for (int i = 0; i < jTable5.getRowCount(); i++) {
                System.out.println("debug here "+menuMap.get(jTable5.getValueAt(i, 0)));
                String insertDetailSQL = "INSERT INTO InvoiceDetails (InvoiceNumber, ItemID, ItemQuantity) " +
                                         "VALUES ('" + addInvoiceNo.getText() + "', '" + menuMap.get(jTable5.getValueAt(i, 0)) + "', '" + jTable5.getValueAt(i, 2) + "')";
                stmt.executeUpdate(insertDetailSQL);
            }
            try {
                jTable1.setModel(GuiApplication.populateTable("Invoices"));
                jTable1.getSelectionModel().setSelectionInterval( 1, 1 );
            } catch (Exception e) {
                 e.printStackTrace();
            }
            CardLayout layout = (CardLayout) jPanel2.getLayout();
            layout.show(jPanel2, "viewInvoice");
            //Debugging loop
            /* for(int i = 0; i<clientMap.size(); i++) {
            System.out.println(clientMap.get((String) clientCombo.getSelectedItem()));
            }*/
            
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Resetting add panel
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
         {null, null, null}
        },
        new String [] {
            "Description", "Quantity", "Total Price"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }
    });
        TableColumn itemColumn2 = jTable5.getColumnModel().getColumn(0);
        try {
            itemColumn2.setCellEditor(new DefaultCellEditor(populateItemDetail()));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        addClientCombo.setSelectedIndex(0);
        addContactCombo.setSelectedIndex(0);
        addAddressCombo.setSelectedIndex(0);
    }//GEN-LAST:event_jButton12ActionPerformed
public String[] getAddContacts() throws SQLException {
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT c.ContactFirstName, c.ContactLastName FROM Contacts c INNER JOIN Clients cl ON c.ClientID = cl.ClientID WHERE cl.ClientName = "+"'"+(String)frame.addClientCombo.getSelectedItem()+"'");
        
        ArrayList<String> reValue = new ArrayList<>();
        
        while(rs.next()) {
            reValue.add(rs.getString(1)+" "+rs.getString(2));
        }
        return(String[]) reValue.toArray(new String[reValue.size()]);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel InvoicePanelHeader;
    private javax.swing.JComboBox<String> PONumberCombo;
    private javax.swing.JComboBox<String> addAddressCombo;
    public javax.swing.JComboBox<String> addClientCombo;
    public javax.swing.JComboBox<String> addContactCombo;
    private javax.swing.JTextField addDate;
    private javax.swing.JTextField addDueDate;
    private javax.swing.JLabel addInvoiceNo;
    private javax.swing.JPanel addInvoicePanel;
    public javax.swing.JLabel areaAddress;
    private javax.swing.JComboBox<String> clientAddressCombo;
    public javax.swing.JComboBox<String> clientCombo;
    private javax.swing.JLabel clientLabel;
    private javax.swing.JLabel clientLabel1;
    private javax.swing.JLabel clientLabel2;
    public javax.swing.JLabel clientName;
    public javax.swing.JComboBox<String> contactCombo;
    public javax.swing.JLabel contactNameLabel;
    public javax.swing.JLabel countyAddress;
    private javax.swing.JTextField editDate;
    private javax.swing.JTextField editDueDate;
    private javax.swing.JLabel editInvoiceNo;
    private javax.swing.JPanel editInvoicePanel;
    public javax.swing.JLabel eircode;
    public javax.swing.JLabel invoiceDate;
    private javax.swing.JLabel invoiceDateLabel;
    private javax.swing.JLabel invoiceDateLabel1;
    private javax.swing.JLabel invoiceDateLabel2;
    public javax.swing.JLabel invoiceDueDate;
    private javax.swing.JLabel invoiceDueDateLabel;
    private javax.swing.JLabel invoiceDueDateLabel1;
    private javax.swing.JLabel invoiceDueDateLabel2;
    public javax.swing.JLabel invoiceNo;
    private javax.swing.JLabel invoiceNoLabel;
    private javax.swing.JLabel invoiceNoLabel10;
    private javax.swing.JLabel invoiceNoLabel11;
    private javax.swing.JLabel invoiceNoLabel12;
    private javax.swing.JLabel invoiceNoLabel13;
    private javax.swing.JLabel invoiceNoLabel14;
    private javax.swing.JLabel invoiceNoLabel15;
    private javax.swing.JLabel invoiceNoLabel16;
    private javax.swing.JLabel invoiceNoLabel17;
    private javax.swing.JLabel invoiceNoLabel18;
    private javax.swing.JLabel invoiceNoLabel5;
    private javax.swing.JLabel invoiceNoLabel6;
    private javax.swing.JLabel invoiceNoLabel7;
    private javax.swing.JLabel invoiceNoLabel8;
    private javax.swing.JLabel invoiceNoLabel9;
    private javax.swing.JLabel invoicePONoLabel;
    private javax.swing.JLabel invoicePONoLabel1;
    private javax.swing.JLabel invoicePONoLabel2;
    private javax.swing.JPanel invoicePanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    public javax.swing.JTable jTable1;
    public javax.swing.JTable jTable2;
    public javax.swing.JTable jTable3;
    public javax.swing.JTable jTable5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    public javax.swing.JLabel poNumber;
    public javax.swing.JLabel streetAddress;
    private javax.swing.JPanel viewInvoicePanel;
    // End of variables declaration//GEN-END:variables

        Map<String, String> menu = new HashMap<>();
        
     public JComboBox populateItemDetail() throws SQLException {
    ArrayList<String> reValue = new ArrayList<>();

    try (Connection conn = DriverManager.getConnection(url);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT m.ItemID, m.ItemName FROM Menu m")) {
        
        while (rs.next()) {
            reValue.add(rs.getString(2));
            menu.put(rs.getString(1), rs.getString(2));
        }
         conn.close();
         stmt.close();
         rs.close();
         Set<String> keySet = menu.keySet();
         //for(String k : keySet) 
          //   System.out.println(k+" | "+menu.get(k));
         

    String[] values = reValue.toArray(new String[0]); // Initialize with size 0 to handle empty lists
    JComboBox<String> box = new JComboBox<>(values);
   
    return box;
        }
    }

public void setItemDetails() throws SQLException {
    System.out.println(jTable3.getRowCount());
    for (int i = 0; i < jTable3.getRowCount(); i++) {
        TableCellEditor editor = jTable3.getCellEditor(i, 0);
        if (editor != null && editor instanceof DefaultCellEditor) {
            DefaultCellEditor defaultEditor = (DefaultCellEditor) editor;
            Component component = defaultEditor.getComponent();
            if (component instanceof JComboBox) {
                JComboBox<?> comboBox = (JComboBox<?>) component;
                comboBox.setModel(populateItemDetail().getModel());
               
                comboBox.setSelectedIndex(getSelectedItem(i));
            }
        }
    }
}

    //
    
    public int getSelectedItem(int row) throws SQLException {
        populateInvoiceDetailHashMap();
        
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        //System.out.println("hello"+comboBox.getItemCount());
        ResultSet rs = stmt.executeQuery("SELECT m.ItemID FROM Menu m INNER JOIN InvoiceDetails id on id.ItemID = m.ItemID WHERE m.ItemName = "+"'"+jTable3.getModel().getValueAt(0, 0)+"'");
        int reValue = rs.getInt(1);
         
        
        conn.close();
        stmt.close();
        rs.close();
        return reValue;
    }
  public String[] getAddresses(String name) throws SQLException {
      
        ArrayList<String> reValue = new ArrayList<>();
         
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT c.ClientPrintAddress FROM ClientAddresses c INNER JOIN Clients cl ON c.ClientID = cl.ClientID WHERE cl.ClientName = "+" '"+name+"'");
        while(rs.next())
            reValue.add(rs.getString(1));
        
        reValue.set(0, reValue.get(0).replace(",", "\n"));
        
    
//System.out.println("Firing addresses "+reValue.get(0));
       conn.close();
         stmt.close();
         rs.close();
        return reValue.toArray(new String[reValue.size()]);
    }
  
  //
  ArrayList<String[]> loadedDetails = new ArrayList();
  
   public DefaultTableModel searchTable(String table) throws SQLException {
    DriverManager.registerDriver(new org.sqlite.JDBC());
    Connection conn = DriverManager.getConnection(url);
    Statement stmt = conn.createStatement();

    Vector columnNames = new Vector();
    Vector rows = new Vector();
    //System.out.println(jTable1.getValueAt(jTable1.getSelectedRow(), 0));
    ResultSet rs = stmt.executeQuery("SELECT m.ItemName, id.ItemQuantity, m.ItemPrice * id.ItemQuantity AS Total_Price  FROM Menu m INNER JOIN InvoiceDetails id ON m.ItemID = id.ItemID  WHERE  id.InvoiceNumber = "+ jTable1.getValueAt(jTable1.getSelectedRow(), 0));
    
    if (rs != null && !rs.isClosed()) {
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();
        
        // Populate column names
        for (int i = 0; i < columnCount; i++) {
            String label = metaData.getColumnLabel(i + 1);
            columnNames.addElement(label);
        }

        // Check if ResultSet is empty
        boolean isEmpty = true;
        while (rs.next()) {
            isEmpty = false;
            Vector newRow = new Vector();
            for (int i = 0; i < columnCount; i++) {
                newRow.addElement(rs.getString(i + 1));
                //System.out.println("populated value " + rs.getString(i + 1));
            }
            rows.addElement(newRow);
        }

        if (isEmpty) {
            // Handle case when ResultSet is empty
            //System.out.println("ResultSet is empty.");
            // You might want to return a default table model or do something else here
        }

    } else {
        
    }

    // Close resources
    rs.close();
    stmt.close();
    conn.close();

    return new DefaultTableModel(rows, columnNames);
}


    
    //I need to create dictionary of menu names and keys of ItemID
    Map<String, String> menuMap = new HashMap();
    public void populateInvoiceDetailHashMap() throws SQLException {
        //Establish the connection
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        //
        ResultSet rs = stmt.executeQuery("SELECT m.ItemID, m.ItemName FROM Menu m");
        
        while(rs.next()) {
            menuMap.put(rs.getString(2), rs.getString(1));
            //System.out.println(rs.getString(2)+"  "+rs.getString(1));
        }
        stmt.close();
        conn.close();
        
    }

   public void updateInvoiceDetails(String invoiceNo) throws SQLException {
        
        //Establish the connection
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        //
        
        //Delete InvoiceDetail records for this invoice
        stmt.executeUpdate("DELETE FROM InvoiceDetails WHERE InvoiceNumber = "+"'"+invoiceNo+"'");
        System.out.println("Deleting from invoice "+invoiceNo);
        stmt.close();
        //
        
        //Inserting details again with new information
        Statement stmt2 = conn.createStatement();
        
        //Convert Detail name to ItemID
        for(int i = 0; i<jTable3.getRowCount(); i++) {
            System.out.println(jTable3.getValueAt(i, 0));
            String item = (String) jTable3.getValueAt(i, 0);
            String itemID = menuMap.get(item);
            stmt2.executeUpdate("INSERT INTO InvoiceDetails (InvoiceNumber, ItemID, ItemQuantity) VALUES ('"+invoiceNo+"', '"+itemID+"' ,'"+jTable3.getValueAt(i, 2)+"')");    
        }
        stmt2.close();
        conn.close();
    }
   
   public void updateInvoice(String invoiceNo) throws SQLException {
        populateAddressMap();
        populateClientMap();
        populateContactMap();
        
        //Establish the connection
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        //
        
        String addressID = addressMap.get((String) clientAddressCombo.getSelectedItem());
        String clientID = clientMap.get((String) clientCombo.getSelectedItem());
        String contactID = contactMap.get((String) contactCombo.getSelectedItem());
        String invoiceDate = editDate.getText();
        System.out.println("date "+editDueDate.getText());
        String invoiceBookingDate = invoiceDate;
        String invoiceDueDate = editDueDate.getText();
        String invoiceNotes = jTextArea1.getText();
        
        //Getting totals
        double invoiceTotal = 0;
        double invoiceSubtotal = 0;
        
        for(int i = 0; i<jTable3.getRowCount(); i++) {       
            invoiceTotal += Double.parseDouble((String) jTable3.getValueAt(i, 2));
            invoiceSubtotal += Double.parseDouble((String) jTable3.getValueAt(i, 2));
        }
        stmt.executeUpdate("UPDATE Invoices SET ClientID = '" + clientID + "', " +
                            "ContactID = '" + contactID + "', " +
                            "InvoiceNotes = '" + invoiceNotes + "', " +
                            "InvoiceTotal = " + invoiceTotal + ", " +
                            "InvoiceSubtotal = " + invoiceSubtotal + ", " +
                            "invoiceDate = '" + invoiceDate + "', " +
                            "invoiceDueDate = '" + invoiceDueDate + "', " +
                            "invoiceBookingDate = '" + invoiceBookingDate + "' " +
                            "WHERE InvoiceNumber = " + editInvoiceNo.getText());
 
        //Debugging loop
       /* for(int i = 0; i<clientMap.size(); i++) {
            System.out.println(clientMap.get((String) clientCombo.getSelectedItem()));
        }*/
   }
    Map<String, String> addressMap = new HashMap();
    public void populateAddressMap() throws SQLException {
        //Establish the connection
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        //
        ResultSet rs = stmt.executeQuery("SELECT a.AddressID, c.ClientName FROM ClientAddresses a INNER JOIN Clients c ON a.ClientID = c.ClientID");
        while(rs.next())
            addressMap.put(rs.getString(2),rs.getString(1));
        
        conn.close();
        stmt.close();
        rs.close();
    }
    
    Map<String, String> clientMap = new HashMap();
    public void populateClientMap() throws SQLException {
         //Establish the connection
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        //SELECT a.AddressID, c.ClientName FROM ClientAddresses a INNER JOIN Clients c ON a.ClientID = c.ClientID
        ResultSet rs = stmt.executeQuery("SELECT c.ClientID, c.ClientName FROM Clients c");
        while(rs.next())
            clientMap.put(rs.getString(2),rs.getString(1));
        
        conn.close();
        stmt.close();
        rs.close();
    }
    
    Map<String, String> contactMap = new HashMap();
    public void populateContactMap() throws SQLException {
         //Establish the connection
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();//
        ResultSet rs = stmt.executeQuery("SELECT c.ContactID, c.ContactFirstName || ' ' || c.ContactLastName AS 'Client Name' FROM Contacts c");
        while(rs.next())
            contactMap.put(rs.getString(2),rs.getString(1));
        
        conn.close();
        stmt.close();
        rs.close();
    }
    
    public void deleteInvoice(String invoiceNo) throws SQLException {
        //Establish the connection
        DriverManager.registerDriver(new org.sqlite.JDBC());
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        stmt.executeUpdate("DELETE FROM Invoices WHERE InvoiceNumber = "+invoiceNo);
        try {
            jTable1.setModel(GuiApplication.populateTable("Invoices"));
            jTable1.getSelectionModel().setSelectionInterval( 1, 1 );
        } catch (Exception e) {
            e.printStackTrace();
        }
        CardLayout layout = (CardLayout) jPanel2.getLayout();
        layout.show(jPanel2, "viewInvoice");
    }
}
